基本概念


3.1语法（这本书是按ECMA-262第3版的中的定义来讲的，会给出第5版的变化说明。）
ECMAScript的语法大量借鉴了C及其他类C语言（如Java和Perl）的语法。

3.1.1区分大小写
ECMAScript中的一切（变量、函数名和操作符）都区分大小写。变量名test和变量名Test分别表示两个不同的变量。
函数名不能使用关键字，比如typeof，但是typeOf就行.

3.1.2标识符
标识符：变量、函数、属性的名字，或者函数的参数。
标识符可以是按照下列格式规则组合起来的一或多个字符：
·第一个字符必须是一个字母、下划线、或一个美元符号；
·其他字符可以是字母、下划线、美元符号或数字。
按惯例，标识符采用驼峰大小写格式，也就是第一个字母小写，剩下的每个有意义的单词的首字母大写，（非强制）例如：
firstSecond、myCar、doSomethingImportant

3.1.3注释
单行注释：//
块级注释：
/*
 *...(这行与下一行前的的*，不是必须的，是为提高注释的可读性。）
 *...
 */
 
 3.1.4语句
 语句以一个分号（；）结尾，如果省略分号，则由解析器确定语句的结尾（不推荐）
 可以使用C风格的语法把多条语句组合到一个代码块中，用{}括起来。
 
 
 
 
 3.2关键字和保留字
 保留字虽然没有任何特定的用途，但是它们有可能将来被用作关键字，也不能作为标识符。
 具体的关键字和保留字暂不记录。
 使用关键字作为标识符，会导致"Identifier Expected"错误。
 
 
 
 
 3.3变量
 ECMAScript的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。
 换句话说，每个变量仅仅是一个用于保存值的占位符而已。
 定义变量时要使用var操作符，后跟变量名，例如：var message;
 像上面messag这样未经过初始化的变量，会保存一个特殊的值——undefined。
 
 可以直接初始化变量，例如：var message="hi";像这样初始化变量并不会把它标记为字符串类型，
 初始化的过程就是给变量赋一个值那么简单。因此，可以在修改变量值的同时修改值得类型，例如：
 var message = "hi";
 message = 100; (有效，但不推荐。）
 
 如果在函数中使用var定义一个变量，那么这个变量在函数退出后就会被销毁。
 也就是函数被调用时，就会创建该变量并为其赋值，之后该变量就立即被销毁。
 不过如果省略var操作符，那么函数里得变量就会变成一个全局变量。（不推荐，因为不好维护。）
 
 可以使用一条语句定义多个变量，用逗号分隔开，例如：
 var message = "hi",
     found = false;
     age = 29;   (换行和缩进不是必要的，但是可以提高可读性。）
     
     
 
 3.4数据类型
 5种简单的数据类型（也称为基本数据类型）：Undefined、Null、Boolean、Number和String。
 还有一种复杂数据类型：Object。Obeject本质上是由一组无序的名和值的对组成的。
 ECMAScript不支持任何创建自定义类型的机制，所有值都是上述六种类型之一。
 
 
 3.4.1typeof操作符
 该操作符用于检测给定变量的数据类型。
 该操作符的操作数可以是变量，也可以是数值字面量。
 typeof是一个操作符而不是函数。
 typeof null会返回"Object"，因为特殊值null被认为是一个空的对象引用。
 从技术角度讲， typeof可能会返回值"function"，函数在ECMAScript中是对象，不是一种数据类型。
 然而，函数有一些特殊的属性，因此通过typeof操作符来区分函数和其他对象是有必要的。
 
 
 3.4.2 Undefined类型
 Undefined类型只有一个值，即特殊的undefined。
 var message；
 alert（message == undefined）；//true
 包含undefined值得变量与尚未定义的变量还是不一样的。
 尚未声明的变量，只能执行一项操作，即使用typeof操作符检测其数据类型（使用delete也可以，但没有意义，严格模式下会出错。）
 （声明就是写出变量名，或写出var 变量名；初始化就是给变量名赋值。）
 
 
 
 
 
 
 
