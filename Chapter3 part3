3.6　语句
ECMA-262规定了一组语句（也称为流控制语句）。从本质上看，语句 定义了ECMAScript中的主要语法，语句通常使用一或多个关键字来完 成给定任务。语句可以很简单，例如通知函数退出；也可以比较复杂， 例如指定重复执行某个命令的次数。



3.6.1　if语句
大多数编程语言中最为常用的一个语句就是if语句。以下是if语句的语法：
if (condition) statement1 else statement2
其中的condition（条件）可以是任意表达式；而且对这个表达式求值的 结果不一定是布尔值。ECMAScript会自动调用Boolean()转换函数将 这个表达式的结果转换为一个布尔值。如果对condition求值的结果 是true，则执行statement1（语句1），如果对condition求值的结果 是false，则执行statement2（语句2）。而且这两个语句既可以是一行 代码，也可以是一个代码块（以一对花括号括起来的多行代码）。
另外，也可以像下面这样把整个if语句写在一行代码中：
if (condition1) statement1 else if (condition2) statement2 else statement3
但我们推荐的做法则是像下面这样：
if (i > 25) {    
  alert("Greater than 25."); 
} else if (i < 0) {    
  alert("Less than 0."); 
} else {    
  alert("Between 0 and 25, inclusive."); 
}



3.6.2　do-while语句
do-while语句是一种后测试循环语句，即只有在循环体中的代码执行 之后，才会测试出口条件。换句话说，在对条件表达式求值之前，循环 体内的代码至少会被执行一次。以下是do-while语句的 语法：
do {    
  statement 
} while (expression);
像do-while这种后测试循环语句最常用于循环体中的代码至少要 被执行一次的情形。



3.6.3　while语句
while语句属于前测试循环语句，也就是说，在循环体内的代码被执行 之前，就会对出口条件求值。因引，循环体内的代码有可能永远不会被 执行。以下是while语句的语法：
while(expression) statement



3.6.4　for语句
for语句也是一种前测试循环语句，但它具有在执行循环之前初始化变 量和定义循环后要执行的代码的能力。以下是for语句的语法：
for (initialization; expression; post-loop-expression) statement，例子；
var count = 10; 
for (var i = 0; i < count; i++){    
  alert(i); 
}
有必要指出的是，在for循环的变量初始化表达式中，也可以不使用var关键字。该变量的初始化可以在外部执行。
使用while循环做不到的，使用for循环同样也做不到。也就是说，for 循环只是把与循环有关的代码集中在了一个位置。
由于 ECMAScript中不存在块级作用域（第4章将进一步讨论这一点），因此 在循环内部定义的变量也可以在外部访问到，例如：
var count = 10; 
for (var i = 0; i < count; i++){   
  alert(i); 
}
alert(i);    //10
在这个例子中，会有一个警告框显示循环完成后变量i的值，这个值是 10。这是因为，即使i是在循环内部定义的一个变量，但在循环外部仍 然可以访问到它。
此外，for语句中的初始化表达式、控制表达式和循环后表达式都是可选的。将这两个表达式全部省略，就会创建一个无限循环，例如：
for (;;) {     // 无限循环 
  doSomething(); 
}
而只给出控制表达式实际上就把for循环转换成了while循环，例如：
var count = 10;
var i = 0
for (; i < count; ){    
  alert(i);    
  i++; 
}
由于for语句存在极大的灵活性，因此它也是ECMAScript中最常用的一个语句。




3.6.5　for-in语句
for-in语句是一种精准的迭代语句，可以用来枚举对象的属性。以下是for-in语句的语法：
for (property in expression) statement
下面是一个示例：
for (var propName in window) {
   document.write(propName); 
}
在这个例子中，我们使用for-in循环来显示了BOM中window对象的所 有属性。每次执行循环时，都会将window对象中存在的一个属性名赋 值给变量propName。这个过程会一直持续到对象中的所有属性都被枚 举一遍为止。
与for语句类似，这里控制语句中的var操作符也不是必 需的。但是，为了保证使用局部变量，我们推荐上面例子中的这种做法。
ECMAScript对象的属性没有顺序。因此，通过for-in循环输出的属性 名的顺序是不可预测的。具体来讲，所有属性都会被返回一次，但返回 的先后次序可能会因浏览器而异。
但是，如果表示要迭代的对象的变量值为null或undefined，for-in 语句会抛出错误。ECMAScript 5更正了这一行为；对这种情况不再抛出 错误，而只是不执行循环体。为了保证最大限度的兼容性，建议在使 用for-in循环之前，先检测确认该对象的值不是null或undefined。




3.6.6　label语句
使用label语句可以在代码中添加标签，以便将来使用。以下是label 语句的语法：
label: statement
下面是一个示例：
start: for (var i=0; i < count; i++) {
  alert(i);
}
这个例子中定义的start标签可以在将来由break或continue语句引用。加标签的语句一般都要与for语句等循环语句配合使用：
var num = 0;
outermost:
for(var i=0; i<10; i++){
    for(var j=0; j<10; j++){
        if(i === 5 && j === 5){
            break outermost;
        }
        num++;
    }
}
alert(num); //55
在这个例子中，outermost表示外层的for循环语句。如果每个循环都正常执行10次，则num++语句就会执行100次。但内部循环的break语句带了一个参数：要返回的标签。添加这个标签结果将导致不仅会退出内部的for循环，而且也会退出外部的for循环。为此，当变量i和j都等于5时，num的值正好是55。
同样，continue语句也可以像这样与label语句联用， 如下面的例子所示：
var num = 0;
outermost:
for(var i=0; i<10; i++){
    for(var j=0; j<10; j++){
        if(i === 5 && j === 5){
            continue outermost;
        }
        num++;
    }
}
alert(num); //95
在这种情况下，continue语句会强制继续执行循环——退出内部循 环，执行外部循环。当j是5时，continue语句执行，而这也就意味着 内部循环少执行了5次，因此num的结果是95。 
虽然联用break、continue和label语句能够执行复杂的操作，但如果 使用过度，也会给调试带来麻烦。在此，我们建议如果使用label语 句，一定要使用描述性的标签，同时不要嵌套过多的循环。



3.6.7　break和continue语句
break和continue语句用于在循环中精确地控制代码的执行。其 中，break语句会立即退出循环，强制继续执行循环后面的语句。 而continue语句虽然也是立即退出循环，但退出循环后会从循环的顶部继续执行。



3.6.8　with语句
with语句的作用是将代码的作用域设置到一个特定的对象中。with语 句的语法如下：
with (expression) statement;
定义with语句的目的主要是为了简化多次编写同一个对象的工作，如下 面的例子所示：
var qs = location.search.substring(1); 
var hostName = location.hostname; 
var url = location.href;
with(location){
   var qs = search.substring(1);    
   var hostName = hostname;    
   var url = href;
}
在这个重写后的例子中，使用with语句关联了location对象。这意味着在with语句的代码块内部，每个变量首先被认为是一个局部变量，而 如果在局部环境中找不到该变量的定义，就会查询location对象中是 否有同名的属性。如果发现了同名属性，则以location对象属性的值作为变量的值。
由于大量使用with语句会导致性能下降，同时也会给调试代码造 成困难，因此在开发大型应用程序时，不建议使用with语句。 



3.6.9　switch语句
switch语句与if语句的关系最为密切，而且也是在其他语言中普遍使 用的一种流控制语句。ECMAScript中switch语句的语法与其他基于C 的语言非常接近，如下所示：
switch (expression) {
   case value: statement    
    break;  
   case value: statement    
    break;  
   case value: statement    
    break;  
   case value: statement    
    break;  
   default: statement 
}
switch语句中的每一种情形（case）的含义是：“如果表达式等于这个值（value），则执行后面的语句（statement）”。而break关键字会导致 代码执行流跳出switch语句。如果省略break关键字，就会导致执行完 当前case后，继续执行下一个case。最后的default关键字则用于在表 达式不匹配前面任何一种情形的时候，执行机动代码（因此，也相当于 一个else语句）。
从根本上讲，switch语句就是为了让开发人员免于编写像下面这样的代码：
if (i == 25){  
  alert("25"); 
} else if (i == 35) {  
  alert("35"); 
} else if (i == 45) {  
  alert("45"); 
} else {  
  alert("Other"); 
}
而与此等价的switch语句如下所示：
switch (i) {    
  case 25:         
    alert("25");        
    break;    
  case 35:         
    alert("35");        
    break;    
  case 45:         
    alert("45");        
    break;    
  default:         
  alert("Other"); 
}
通过为每个case后面都添加一个break语句，就可以避免同时执行多个case代码的情况。假如确实需要混合几种情形，不要忘了在代码中添加 注释，说明你是有意省略了break关键字。
虽然ECMAScript中的switch语句借鉴自其他语言，但这个语句也有自 己的特色。首先，可以在switch语句中使用任何数据类型（在很多其 他语言中只能使用数值），无论是字符串，还是对象都没有问题。其 次，每个case的值不一定是常量，可以是变量，甚至是表达式。
*switch语句在比较值时使用的是全等操作符，因此不会发生类型 转换（例如，字符串"10"不等于数值10）。





3.7　函数
函数对任何语言来说都是一个核心的概念。通过函数可以封装任意多条 语句，而且可以在任何地方、任何时候调用执行。ECMAScript中的函 数使用function关键字来声明，后跟一组参数以及函数体。函数的基 本语法如下所示：
function functionName(arg0, arg1,...,argN) {
  statements
}
以下是一个函数示例：
function sayHi(name, message) {   
  alert("Hello " + name + "," + message); 
}
这个函数可以通过其函数名来调用，后面还要加上一对圆括号和参数 （圆括号中的参数如果有多个，可以用逗号隔开）。调用sayHi()函数 的代码如下所示：
sayHi("Nicholas", "how are you today?");
这个函数的输出结果是"Hello Nicholas,how are you today?"。 函数中定义中的命名参数name和message被用作了字符串拼接的两个操 作数，而结果最终通过警告框显示了出来。

ECMAScript中的函数在定义时不必指定是否返回值。实际上，任何函 数在任何时候都可以通过return语句后跟要返回的值来实现返回值。 
function sum(num1, num2) {
  return num1 + num2;
}
这个sum()函数的作用是把两个值加起来返回一个结果。我们注意到， 除了return语句之外，没有任何声明表示该函数会返回一个值。调用 这个函数的示例代码如下：
var result = sum(5, 10);
这个函数会在执行完return语句之后停止并立即退出。因此，位于 return语句之后的任何代码都永远不会执行。例如：
function sum(num1, num2) {
  return num1 + num2;
  alert("Hello world");    // 永远不会执行 
}
另外，return语句也可以不带有任何返回值。在这种情况下，函数在停止执行后将返回undefined值。这种用法一般用在需要提前停止函数执行而又不需要返回值的情况下。比如在下面这个例子中，就不会显示 警告框：
function sayHi(name, message) {
  return;
  alert("Hello " + name + "," + message);    //永远不会调用
}
推荐的做法是要么让函数始终都返回一个值，要么永远都不要返 回值。否则，如果函数有时候返回值，有时候有不返回值，会给调试 代码带来不便。
严格模式对函数有一些限制：
·不能把函数命名为eval或arguments； 
·不能把参数命名为eval或arguments；
·不能出现两个命名参数同名的情况。
如果发生以上情况，就会导致语法错误，代码无法执行。




3.7.1　理解参数
ECMAScript函数的参数与大多数其他语言中函数的参数有所不同。 
ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。
也就是说，即便你定义的函数只接收两个参数，在调用 这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传 递参数，而解析器永远不会有什么怨言。
之所以会这样，原因是 ECMAScript中的参数在内部是用一个数组来表示的。函数接收到的始 终都是这个数组，而不关心数组中包含哪些参数（如果有参数的话）。
实际上，在函数体内可以通过arguments对象来访问这个参数数组，从而获取传递给函数的每一个参数。
其实，arguments对象只是与数组类似（它并不是Array的实例），因为可以使用方括号语法访问它的每一个元素（即第一个元素 是arguments[0]，第二个元素是argumetns[1]，以此类推），使用length属性来确定传递进来多少个参数。
在前面的例子中，sayHi() 函数的第一个参数的名字叫name，而该参数的值也可以通过访问 arguments[0]来获取。因此，那个函数也可以像下面这样重写，即不显式地使用命名参数：
function sayHi() {
  alert("Hello " + arguments[0] + "," + arguments[1]); 
}
这个重写后的函数中不包含命名的参数。虽然没有使用name和message标识符，但函数的功能依旧。这个事实说明了ECMAScript函数的一个 重要特点：命名的参数只提供便利，但不是必需的。
另外，在命名参数方面，其他语言可能需要事先创建一个函数签名，而将来的调用必须与该签名一致。但在ECMAScript中，没有这些条条框框，解析器不会验证命名参数。//签名是啥？ https://developer.mozilla.org/zh-CN/docs/Glossary/Signature/Function

通过访问arguments对象的length属性可以获知有多少个参数传递给了函数。下面这个函数会在每次被调用时，输出传入其中的参数个数：
function howManyArgs() {    
  alert(arguments.length); 
}
howManyArgs("string", 45);  //2 
howManyArgs();              //0 
howManyArgs(12);            //1
由此可见，开
发人员可以利用这一点让函数能够接收任意个参数并分别实现适当的功能。请看下面的例子：
function doAdd() {    
  if(arguments.length == 1) {        
    alert(arguments[0] + 10);    
  } else if (arguments.length == 2) {        
    alert(arguments[0] + arguments[1]);    
  } 
}
doAdd(10);         //20 
doAdd(30, 20);     //50
函数doAdd()会在只有一个参数的情况下给该参数加上10；如果是两个 参数，则将那个参数简单相加并返回结果。因此，doAdd(10)会返回 20，而doAdd(30,20)则返回50。虽然这个特性算不上完美的重载，但也足够弥补ECMAScript的这一缺憾了。 

另一个与参数相关的重要方面，就是arguments对象可以与命名参数一 起使用，如下面的例子所示：
function doAdd(num1, num2) {    
  if(arguments.length == 1) {       
    alert(num1 + 10);    
  } else if (arguments.length == 2) {        
    alert(arguments[0] + num2);    
  } 
}
在重写后的这个doAdd()函数中，两个命名参数都与arguments对象一 起使用。由于num1的值与arguments[0]的值相同，因此它们可以互换 使用（当然，num2和arguments[1]也是如此）。 
关于arguments的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步。例如：
function doAdd(num1, num2) {
  arguments[1] = 10; 
  alert(arguments[0] + num2);
}
每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值修 改为10。因为arguments对象中的值会自动反映到对应的命名参数，所以修改arguments[1]，也就修改了num2，结果它们的值都会变成10。 
不过，这并不是说读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但它们的值会同步。
但这种影响是单向的：修改命名参数不会改变arguments中对应的值。
另外还要记住，如果只传入了一个参 数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments对象的长度是由传入的参数个数决定的，不是由定义函数时的命名参数的个数决定的。
关于参数还要记住最后一点：没有传递值的命名参数将自动被赋予undefined值。这就跟定义了变量但又没有初始化一样。例如，如果只给doAdd()函数传递了一个参数，则num2中就会保存undefined值。

严格模式对如何使用argumetns对象做出了一些限制。
首先，像前面例子中那样的赋值会变得无效。也就是说即使把arguments[1]设置为10，num2的值仍然还是undefined。其次，重写arguments的值会导致语法错误（代码将不会执行）。
*ECMAScript中的所有参数传递的都是值，不可能通过引用传递参数。



3.7.2　没有重载
ECMAScript函数不能像传统意义上那样实现重载。
而在其他语言（如 Java）中，可以为一个函数编写两个定义，只要这两个定义的签名（接受的参数的类型和数量）不同即可。
如前所述，ECMAScirpt函数没有签名，因为其参数是由包含零或多个值的数组来表示的。而没有函数签
名，真正的重载是不可能做到的。
如果在ECMAScript中定义了两个名字相同的函数，则该名字只属于后 定义的函数。请看下面的例子：
function addSomeNumber(num){    
    return num + 100; 
}
function addSomeNumber(num) {    
   return num + 200; 
}
var result = addSomeNumber(100);    //300
在此，函数addSomeNumber()被定义了两次。第一个版本给参数加 100，而第二个版本给参数加200。由于后定义的函数覆盖了先定义的函 数，因此当在最后一行代码中调用这个函数时，返回的结果就是300。
如前所述，通过检查传入函数中参数的类型和数量并作出不同的反应，可以模仿方法的重载。




3.8　小结
JavaScript的核心语言特性在ECMA-262中是以名为ECMAScript的伪语言 的形式来定义的。ECMAScript中包含了所有基本的语法、操作符、数 据类型以及完成基本的计算任务所必需的对象，但没有对取得输入和产 生输出的机制作出规定。理解ECMAScript及其纷繁复杂的各种细节， 是理解其在Web浏览器中的实现——JavaScript的关键。目前大多数实现 所遵循的都是ECMA-262第3版，但很多也已经着手开始实现第5版了。 

以下简要总结了ECMAscript中基本的要素。 
·ECMAScript中的基本数据类型包括 Undefined、Null、Boolean、Number和String。 
·与其他语言不同，ECMScript没有为整数和浮点数值分别定义不同 的数据类型，Number类型可用于表示所有数值。 ECMAScript中也有一种复杂的数据类型，即Object类型，该类型是这门语言中所有对象的基础类型。
·严格模式为这门语言中容易出错的地方施加了限制。
·ECMAScript提供了很多与C及其他类C语言中相同的基本操作符，包括算术操作符、布尔操作符、关系操作符、相等操作符及赋值操 作符等。
·ECMAScript从其他语言中借鉴了很多流控制语句，例如if语 句、for语句和switch语句等。 

ECMAScript中的函数与其他语言中的函数有诸多不同之处。 
·无须指定函数的返回值，因为任何ECMAScript函数都可以在任何 时候返回任何值。
·实际上，未指定返回值的函数返回的是一个特殊的undefined值。 
·ECMAScript中也没有函数签名的概念，因为其函数参数是以一个
·包含零或多个值的数组的形式传递的。
·可以向ECMAScript函数传递任意数量的参数，并且可以通过 arguments对象来访问这些参数。 由于不存在函数签名的特性，ECMAScript函数不能重载。
