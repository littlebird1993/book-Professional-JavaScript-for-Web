第5章　引用类型

引用类型的值（对象）是引用类型的一个实例。
在ECMAScript中，引 用类型是一种数据结构，用于将数据和功能组织在一起。它也常被称为 类，但这种称呼并不妥当。
尽管ECMAScript从技术上讲是一门面向对 象的语言，但它不引用类型有时候也被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。具备传统的面向对象语言所支持的类和接口等基本结构。
引用类型有时候也被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。
*虽然引用类型与类看起来相似，但它们并不是相同的概念。为避 免混淆，本书将不使用类这个概念。

如前所述，对象是某个特定引用类型的实例。
新对象是使用new操作符 后跟一个构造函数来创建的。
构造函数本身就是一个函数，只不过该函 数是出于创建新对象的目的而定义的。请看下面这行代码：
var person = new Object(); 
这行代码创建了Object引用类型的一个新实例，然后把该实例保存在了变量person中。使用的构造函数是Object，它只为新对象定义了默认的属性和方法。
ECMAScript提供了很多原生引用类型（例如 Object），以便开发人员用以实现常见的计算任务。



5.1　Object类型
Object也是ECMAScript中使用最多的一个类型。
虽然Object的 实例不具备多少功能，但对于在应用程序中存储和传输数据而言，它们 确实是非常理想的选择。
创建Object实例的方式有两种。第一种是使用new操作符后跟Object 构造函数，如下所示：
var person = new Object(); 
person.name = "Nicholas"; 
person.age = 29;
另一种方式是使用对象字面量表示法。
对象字面量是对象定义的一种简写形式，目的在于简化创建包含大量属性的对象的过程。
var person = {    
  name : "Nicholas",    
  age : 29 
};
ECMAScript中的表达式上下文指的是能够返回一个值（表达式）。
赋值操作符表示后面是一个 值，所以左花括号在这里表示一个表达式的开始。
同样的花括号，如果 出现在一个语句上下文（statement context）中，例如跟在if语句条件的 后面，则表示一个语句块的开始。
然后，我们定义了name属性，之后是一个冒号，再后面是这个属性的值。在对象字面量中，使用逗号来分隔不同的属性，因 此"Nicholas"后面是一个逗号。
但是，在age属性的值29的后面不能添加逗号，因为age是这个对象的最后一个属性。在最后一个属性后面添加逗号，会在IE7及更早版本和Opera中导致错误。
在使用对象字面量语法时，属性名也可以使用字符串，如下面这个例子 所示。
var person = {    
  "name" : "Nicholas",    
  "age" : 29,    
  5 : true 
};
这个例子会创建一个对象，包含三个属性：name、age和5。但这里的 数值属性名会自动转换为字符串。
另外，使用对象字面量语法时，如果留空其花括号，则可以定义只包含默认属性和方法的对象，如下所示：
var person = {};         //与new Object()相同 
person.name = "Nicholas"; 
person.age = 29;
关 于对象字面量语法，我们推荐只在考虑对象属性名的可读性时使用。
* 在通过对象字面量定义对象时，实际上不会调用Object构造函数。

虽然可以使用前面介绍的任何一种方法来定义对象，但开发人员更青睐 对象字面量语法，因为这种语法要求的代码量少，而且能够给人封装数据的感觉。实际上，对象字面量也是向函数传递大量可选参数的首选方式，例如：
function displayInfo(args) {
    var output = "";
    if (typeof args.name == "string"){        
      output += "Name: " + args.name + "\n";    
    }
    if (typeof args.age == "number") {        
      output += "Age: " + args.age + "\n";    
    }
    alert(output); 
}
displayInfo({     
  name: "Nicholas",     
  age: 29 
});
displayInfo({    
  name: "Greg" 
});
在这个例子中，函数displayInfo()接受一个名为args的参数。（参数也可以有属性的哦。）
这个 参数可能带有一个名为name或age的属性，也可能这两个属性都有或者都没有。
在这个函数内部，我们通过typeof操作符来检测每个属性是否存在，然后再基于相应的属性来构建一条要显示的消息。然后，我们 调用了两次这个函数，每次都使用一个对象字面量来指定不同的数据。 这两次调用传递的参数虽然不同，但函数都能正常执行。
*这种传递参数的模式最适合需要向函数传入大量可选参数的情形。
*一般来讲，命名参数虽然容易处理，但在有多个可选参数的情况 下就会显示不够灵活。
*最好的做法是对那些必需值使用命名参数，而 使用对象字面量来封装多个可选参数。

一般来说，访问对象属性时使用的都是点表示法，这也是很多面向对象 语言中通用的语法。
不过，在JavaScript也可以使用方括号表示法来访问 对象的属性。
在使用方括号语法时，应该将要访问的属性以字符串的形式放在方括号中，如下面的例子所示。
alert(person["name"]);          //"Nicholas" 
alert(person.name);             //"Nicholas"
从功能上看，这两种访问对象属性的方法没有任何区别。但方括号语法 的主要优点是可以通过变量来访问属性，例如：
var propertyName = "name"; 
alert(person[propertyName]);    //"Nicholas"
如果属性名中包含会导致语法错误的字符，或者属性名使用的是关键字或保留字，也可以使用方括号表示法。例如：
person["first name"] = "Nicholas";
由于"first name"中包含一个空格，所以不能使用点表示法来访问它。然而，属性名中是可以包含非字母非数字的，这时候就可以使用方括号表示法来访问它们。
通常，除非必须使用变量来访问属性，否则我们建议使用点表示法。




5.2　Array类型
除了Object之外，Array类型恐怕是ECMAScript中最常用的类型了。 
而且，ECMAScript中的数组与其他多数语言中的数组有着相当大的区别。
虽然ECMAScript数组与其他语言中的数组都是数据的有序列表， 但与其他语言不同的是，ECMAScript数组的每一项可以保存任何类型 的数据。
也就是说，可以用数组的第一个位置来保存字符串，用第二位 置来保存数值，用第三个位置来保存对象，以此类推。
ECMAScript数组的大小是可以动态调整的，即可以随着数据的添加自 动增长以容纳新增数据。
创建数组的基本方式有两种。第一种是使用Array构造函数，如下面的 代码所示。
var colors = new Array();
如果预先知道数组要保存的项目数量，也可以给构造函数传递该数量， 而该数量会自动变成length属性的值。例如，下面的代码将创建 length值为20的数组。
var colors = new Array(20);
也可以向Array构造函数传递数组中应该包含的项。以下代码创建了一 个包含3个字符串值的数组：
var colors = new Array("red", "blue", "green");
当然，给构造函数传递一个值也可以创建数组。但这时候问题就复杂一 点了，因为如果传递的是数值，则会按照该数值创建包含给定项数的数 组；而如果传递的是其他类型的参数，则会创建包含那个值的只有一项 的数组。下面就两个例子：
var colors = new Array(3);           // 创建一个包含3项的数组 
var names = new Array("Greg");       // 创建一个包含1项，即字符串"Greg
另外，在使用Array构造函数时也可以省略new操作符。如下面的例子 所示，省略new操作符的结果相同：
var colors = Array(3);               // 创建一个包含3项的数组 
var names = Array("Greg");           // 创建一个包含1项，即字符串"Greg"

创建数组的第二种基本方式是使用数组字面量表示法。
数组字面量由一 对包含数组项的方括号表示，多个数组项之间以逗号隔开，如下所示：
var colors = ["red", "blue", "green"];   // 创建一个包含3个字符串的数组 
var names = [];                          // 创建一个空数组 
var values = [1,2,];                     // 不要这样！这样会创建一个包含2或3项的数组 
var options = [,,,,,];                   // 不要这样！这样会创建一个包含5或6项的数组
第三行展示了在数组字面量的最后一项添 加逗号的结果：在IE中，values会成为一个包含3个项且每项的值分别 为1、2和undefined的数组；在其他浏览器中，values会成为一个包 含2项且值分别为1和2的数组。原因是IE8及之前版本中的ECMAScript 实现在数组字面量方面存在bug。由于这个bug导致的另一种情况如最后一行代码所示。
*与对象一样，在使用数组字面量表示法时，也不会调用Array构 造函数（Firefox 3及更早版本除外）。
在读取和设置数组的值时，要使用方括号并提供相应值的基于0的数字 索引，如下所示：
var colors = ["red", "blue", "green"];    // 定义一个字符串数组 
alert(colors[0]);                         // 显示第一项
colors[2] = "black";                      // 修改第三项 
colors[3] = "brown";                      // 新增第四项
方括号中的索引表示要访问的值。如果索引小于数组中的项数，则返回 对应项的值，就像这个例子中的colors[0]会显示"red"一样。设置数 组的值也使用相同的语法，但会替换指定位置的值。如果设置某个值的 索引超过了数组现有项数，如这个例子中的colors[3]所示，数组就会 自动增加到该索引值加1的长度。
数组的项数保存在其length属性中，这个属性始终会返回0或更大的值，如下面这个例子所示：
var colors = ["red", "blue", "green"];       // 创建一个包含3个字符串的数组 
var names = [];                              // 创建一个空数组
alert(colors.length);            //3 
alert(names.length);             //0
数组的length属性很有特点——它不是只读的。因此，通过设置这个属性，可以从数组的末尾移除项或向数组中添加新项。请看下面的例子：
var colors = ["red", "blue", "green"];     // 创建一个包含3个字符串的数组 
colors.length = 2; 
alert(colors[2]);                 //undefined
这个例子中的数组colors一开始有3个值。将其length属性设置为2会 移除最后一项（位置为2的那一项），结果再访问colors[2]就会显 示undefined了。如果将其length属性设置为大于数组项数的值，则 新增的每一项都会取得undefined值。
利用length属性也可以方便地在数组末尾添加新项，如下所示：
var colors = ["red", "blue", "green"];        // 创建一个包含3个字符串的数组 colors[colors.length] = "black";                   //（在位置3）添加一种颜色 colors[colors.length] = "brown";                   //（在位置4）再添加一种颜色
由于数组最后一项的索引始终是length-1，因此下一个新项的位置就是length。
当把一个值放在超 出当前数组大小的位置上时，数组就会重新计算其长度值，即长度值等 于最后一项的索引加1，如下面的例子所示：
var colors = ["red", "blue", "green"];         // 创建一个包含3个字符串的数组 
colors[99] = "black";                          // （在位置99）添加一种颜色 alert(colors.length);  // 100
在这个例子中，我们向colors数组的位置99插入了一个值，结果数组 新长度（length）就是100（99+1）。而位置3到位置98实际上都是不 存在的，所以访问它们都将返回undefined。

*数组最多可以包含4 294 967 295个项，这几乎已经能够满足任何 编程需求了。如果想添加的项数超过这个上限值，就会发生异常。而 创建一个初始大小与这个上限值接近的数组，则可能会导致运行时间 超长的脚本错误。




5.2.1　检测数组
自从ECMAScript 3做出规定以后，就出现了确定某个对象是不是数组的经典问题。
对于一个网页，或者一个全局作用域而言，使用instanceof操作符就能得到满意的结果：
if (value instanceof Array){     
  //对数组执行某些操作 
}
instanceof操作符的问题在于，它假定单一的全局执行环境。如果网 页中包含多个框架，那实际上就存在两个以上不同的全局执行环境，从 而存在两个以上不同版本的Array构造函数。
如果你从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数。

为了解决这个问题，ECMAScript 5新增了Array.isArray()方法。这个方法的目的是最终确定某个值到底是不是数组，而不管它是在哪个全局执行环境中创建的。这个方法的用法如下。
if (Array.isArray(value)){    
  //对数组执行某些操作 
}



5.2.2　转换方法
如前所述，所有对象都具有toLocaleString()、toString()和 valueOf()方法。
其中，调用数组的toString()和valueOf()方法会 返回相同的值，即由数组中每个值的字符串形式拼接而成的一个以逗号 分隔的字符串。
实际上，为了创建这个字符串会调用数组每一项的 toString()方法。来看下面这个例子。






